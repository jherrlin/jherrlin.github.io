<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>John Herrlin</title>
    <link>https://jherrlin.github.io/</link>
    <description>Recent content on John Herrlin</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 15 Jun 2020 13:18:00 +0200</lastBuildDate>
    
	<atom:link href="https://jherrlin.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Emacs Org mode source blocks</title>
      <link>https://jherrlin.github.io/posts/emacs-orgmode-source-code-blocks/</link>
      <pubDate>Mon, 15 Jun 2020 13:18:00 +0200</pubDate>
      
      <guid>https://jherrlin.github.io/posts/emacs-orgmode-source-code-blocks/</guid>
      <description>Intro   It&amp;#39;s time to start documenting how I use Emacs org mode (from now on org) and it will contain a serie of posts.  This is the first post and it will cover source blocks.  One of Emacs many killing features is org. To describe it fairly wide it&amp;#39;s like markdown on steroids, with extensions. You can write headings and subheadings to create levels of sections.</description>
    </item>
    
    <item>
      <title>Arch install with LUKS and systemd-boot</title>
      <link>https://jherrlin.github.io/posts/arch-install/</link>
      <pubDate>Mon, 01 Jun 2020 16:44:47 +0200</pubDate>
      
      <guid>https://jherrlin.github.io/posts/arch-install/</guid>
      <description>Into   Recently made a fresh Arch Linux install.  The setup will looks like this. One HDD with 2 partitions. The first one is unencrypted and contains EFI and boot. Second contains the system and user home. This partition will be encrypted with LUKS and contain a EXT4 file system. For boot systemd-boot will be used.  The LUKS device contains a header with data about the device.</description>
    </item>
    
    <item>
      <title>Quick overview of Clojure spec, test.check and transducers</title>
      <link>https://jherrlin.github.io/posts/clojure-spec-test-transducers/</link>
      <pubDate>Fri, 22 May 2020 23:47:13 +0200</pubDate>
      
      <guid>https://jherrlin.github.io/posts/clojure-spec-test-transducers/</guid>
      <description>Into   A quick and dirty overview on some of the capabilities of Clojure spec, test.check and transducers. With focus on generative data. Describing models with spec and then use test.check to generate entities from that model. Bulletproof transducers with the generated data.  Wont cover or explain details, instead show how it can be used.  Some examples where generated data can be used:    Provide generated data through a Rest API endpoint and serve it a JSON.</description>
    </item>
    
    <item>
      <title>Entity event log in Datomic</title>
      <link>https://jherrlin.github.io/posts/datomic-entity-event-log/</link>
      <pubDate>Sun, 17 May 2020 20:28:11 +0200</pubDate>
      
      <guid>https://jherrlin.github.io/posts/datomic-entity-event-log/</guid>
      <description>TL;DR   Create an event log from Datomic transactions that&amp;#39;s related to an entity. Look at transaction metadata, diffs and the entity from different angles. Intro   I am pretty new to Datomic and writing a small Clojure app. In my domain models I have a model called event-log. This model is used to keep track of changes (mutations) in the system. It have the following attributes: author, datetime, entity, id, type.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://jherrlin.github.io/posts/screenshots/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jherrlin.github.io/posts/screenshots/</guid>
      <description> sudo pacman -S grim slurp  #+END_SRC function screenshot (){ if [-z &amp;#34;$1&amp;#34;]; then # display usage echo &amp;#34;Usage: screenshot FILE&amp;#34; return 1 else grim -g &amp;#34;$(slurp -d)&amp;#34; $1 fi }  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://jherrlin.github.io/posts/wireguard-vpn/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://jherrlin.github.io/posts/wireguard-vpn/</guid>
      <description>https://integrity.st/ https://wireguard-bahnhof.5july.net/  https://www.ivpn.net/knowledgebase/255/Linuxâ€”Autostart-WireGuard-in-systemd.html sudo pacman -S wireguard-tools  sudo wg-quick up integrity_vpn sudo wg-quick down integrity_vpn systemctl status wg-quick@integrity_vpn.service systemctl start wg-quick@integrity_vpn.service systemctl enable wg-quick@integrity_vpn.service  [#] ip link add integrity_vpn type wireguard [#] wg setconf integrity_vpn /dev/fd/63 [#] ip -4 address add 10.0.4.9/24 dev integrity_vpn [#] ip -6 address add fdab:1337:1337:4::9/64 dev integrity_vpn [#] ip link set mtu 1420 up dev integrity_vpn [#] resolvconf -a integrity_vpn -m 0 -x /usr/bin/wg-quick: line 32: resolvconf: command not found [#] ip link delete dev integrity_vpn   https://wiki.</description>
    </item>
    
  </channel>
</rss>