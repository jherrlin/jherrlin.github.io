<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on jherrlin</title>
    <link>https://jherrlin.github.io/posts/</link>
    <description>Recent content in Posts on jherrlin</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 10 Jul 2020 16:00:00 +0200</lastBuildDate>
    
	<atom:link href="https://jherrlin.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Mail in Emacs with mu4e and mbsync</title>
      <link>https://jherrlin.github.io/posts/emacs-mu4e/</link>
      <pubDate>Fri, 10 Jul 2020 16:00:00 +0200</pubDate>
      
      <guid>https://jherrlin.github.io/posts/emacs-mu4e/</guid>
      <description>Intro   This post is the second part about GnuPG, password management, email, signing and encrypting emails and git commit signing. The first posts talked about GnuPG key generation, password management using pass, how to sign git commits and how Emacs connects with most of it. This post will focus on how to manage mails in Emacs with Mu4e and how to signing and encrypting messages with GnuPG. As the posts cover a lot of ground step by step instructions are not desirable.</description>
    </item>
    
    <item>
      <title>Emacs, GnuPG and Pass</title>
      <link>https://jherrlin.github.io/posts/emacs-gnupg-and-pass/</link>
      <pubDate>Fri, 10 Jul 2020 15:00:00 +0200</pubDate>
      
      <guid>https://jherrlin.github.io/posts/emacs-gnupg-and-pass/</guid>
      <description>Intro   This post is the first out of two about GnuPG, password management, email, signing and encrypting emails and git commit signing. As always with a helping hand from Emacs. As the posts cover a lot of ground step by step instructions are not desirable. Links to more detailed resources can be found in each section. The main goal is to provide a quick but informative overview and give inspiration for further research.</description>
    </item>
    
    <item>
      <title>Emacs Org mode tables</title>
      <link>https://jherrlin.github.io/posts/emacs-orgmode-tables/</link>
      <pubDate>Sun, 21 Jun 2020 16:16:30 +0200</pubDate>
      
      <guid>https://jherrlin.github.io/posts/emacs-orgmode-tables/</guid>
      <description>Intro   This is the second post in the serie of how I use Emacs Org mode (from now on org) and it will cover usage of org tables. Some of the content assumes basic knowledge about org. If you are new to org I can recommend this two videos; hrs and kitchin.  Org tables are like spreadsheets with super powers. Tables can be used to keep information organized, as input to source blocks (more about that in the first post, &amp;#34;Emacs Org mode source blocks&amp;#34;) or used in calculations.</description>
    </item>
    
    <item>
      <title>Emacs Org mode source blocks</title>
      <link>https://jherrlin.github.io/posts/emacs-orgmode-source-code-blocks/</link>
      <pubDate>Mon, 15 Jun 2020 13:18:00 +0200</pubDate>
      
      <guid>https://jherrlin.github.io/posts/emacs-orgmode-source-code-blocks/</guid>
      <description>Post updates     [2020-06-23] New section. &amp;#34;Combine source blocks&amp;#34;   Intro   It&amp;#39;s time to start documenting how I use Emacs Org mode (from now on org) and it will contain a serie of posts. This is the first post and it will cover source blocks. Some of the content assumes basic knowledge about org. If you are new to org I can recommend this two videos; hrs and kitchin.</description>
    </item>
    
    <item>
      <title>Arch install with LUKS and systemd-boot</title>
      <link>https://jherrlin.github.io/posts/arch-install/</link>
      <pubDate>Mon, 01 Jun 2020 16:44:47 +0200</pubDate>
      
      <guid>https://jherrlin.github.io/posts/arch-install/</guid>
      <description>Into   Recently made a fresh Arch Linux install.  The setup will looks like this. One HDD with 2 partitions. The first one is unencrypted and contains EFI and boot. Second contains the system and user home. This partition will be encrypted with LUKS and contain a EXT4 file system. For boot systemd-boot will be used.  The LUKS device contains a header with data about the device.</description>
    </item>
    
    <item>
      <title>Quick overview of Clojure spec, test.check and transducers</title>
      <link>https://jherrlin.github.io/posts/clojure-spec-test-transducers/</link>
      <pubDate>Fri, 22 May 2020 23:47:13 +0200</pubDate>
      
      <guid>https://jherrlin.github.io/posts/clojure-spec-test-transducers/</guid>
      <description>Into   A quick and dirty overview on some of the capabilities of Clojure spec, test.check and transducers. With focus on generative data. Describing models with spec and then use test.check to generate entities from that model. Bulletproof transducers with the generated data.  Wont cover or explain details, instead show how it can be used.  Some examples where generated data can be used:    Provide generated data through a Rest API endpoint and serve it a JSON.</description>
    </item>
    
    <item>
      <title>Entity event log in Datomic</title>
      <link>https://jherrlin.github.io/posts/datomic-entity-event-log/</link>
      <pubDate>Sun, 17 May 2020 20:28:11 +0200</pubDate>
      
      <guid>https://jherrlin.github.io/posts/datomic-entity-event-log/</guid>
      <description>TL;DR   Create an event log from Datomic transactions that&amp;#39;s related to an entity. Look at transaction metadata, diffs and the entity from different angles. Intro   I am pretty new to Datomic and writing a small Clojure app. In my domain models I have a model called event-log. This model is used to keep track of changes (mutations) in the system. It have the following attributes: author, datetime, entity, id, type.</description>
    </item>
    
  </channel>
</rss>