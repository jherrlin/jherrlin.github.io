<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>programming on jherrlin</title>
    <link>https://jherrlin.github.io/tags/programming/</link>
    <description>Recent content in programming on jherrlin</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 04 Aug 2022 08:15:43 +0200</lastBuildDate><atom:link href="https://jherrlin.github.io/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Emacs on Macos Monterey</title>
      <link>https://jherrlin.github.io/posts/emacs-on-macos-monterey/</link>
      <pubDate>Thu, 04 Aug 2022 08:15:43 +0200</pubDate>
      
      <guid>https://jherrlin.github.io/posts/emacs-on-macos-monterey/</guid>
      <description>Intro Got a new computer from work, this is some quick notes on how my Emacs setup looks.
Run Emacs as daemon with LaunchAgent. Fetch mails periodically with mbsync via LaunchAgent.
Install brew install --cask emacs brew install mu brew install isync brew install gpg brew ls --verbose emacs brew ls --verbose mu Mu4a mkdir -p ~/.mail/work ~/.mail/gmail mu init --maildir=~/.mail --my-address=USERNAME@gmail.com --my-address=USERNAME@work.com mu index mbsync -Va mu index Mbsync config cat ~/.</description>
    </item>
    
    <item>
      <title>Learn RxJava with Emacs Org mode</title>
      <link>https://jherrlin.github.io/posts/rx-java-with-org-mode/</link>
      <pubDate>Sat, 23 Jan 2021 11:14:05 +0200</pubDate>
      
      <guid>https://jherrlin.github.io/posts/rx-java-with-org-mode/</guid>
      <description>Intro RxJava is a Java library that can be used to create non blocking reactive systems in Java. The mindset of non blocking and how to work with RxJava was a bit hard for me to grasp, and still is! I am by no means a skilled RxJava user. But I have found a tool that helps me on the journey to become a better one. And of course this is Org mode and Emacs.</description>
    </item>
    
    <item>
      <title>Emacs Orgmode Source Code Blocks 2</title>
      <link>https://jherrlin.github.io/posts/emacs-orgmode-source-code-blocks2/</link>
      <pubDate>Wed, 22 Jul 2020 11:14:05 +0200</pubDate>
      
      <guid>https://jherrlin.github.io/posts/emacs-orgmode-source-code-blocks2/</guid>
      <description>Intro This is the third post in a series about Emacs Org mode and the second about source code blocks.
The last post about source code blocks (blocks from now on) covered org document variables, named blocks and combining blocks.
This post will focus on how and where block result output will end up. It won&amp;#39;t cover all of the arguments and features as I don&amp;#39;t use all of them.</description>
    </item>
    
    <item>
      <title>Learn AWK with Emacs</title>
      <link>https://jherrlin.github.io/posts/learn-awk/</link>
      <pubDate>Mon, 20 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>https://jherrlin.github.io/posts/learn-awk/</guid>
      <description>Intro This post describes my workflow for learning the AWK programming language using Emacs, Org mode and Org-drill. The workflow may work for other programming languages. The post won&amp;#39;t cover details on how to use Emacs, Org mode or Org-drill. It&amp;#39;s intention is to provide a general overview of a workflow.
A git repo is available with flash cards, note book and some text files here.
Content I just read a few chapters in the &amp;#34;The AWK programming language&amp;#34; book and found AWK to be awesome and I want to learn more of the language.</description>
    </item>
    
    <item>
      <title>Emacs Org mode tables</title>
      <link>https://jherrlin.github.io/posts/emacs-orgmode-tables/</link>
      <pubDate>Sun, 21 Jun 2020 16:16:30 +0200</pubDate>
      
      <guid>https://jherrlin.github.io/posts/emacs-orgmode-tables/</guid>
      <description>Intro This is the second post in the serie of how I use Emacs Org mode (from now on org) and it will cover usage of org tables. Some of the content assumes basic knowledge about org. If you are new to org I can recommend this two videos; hrs and kitchin.
Org tables are like spreadsheets with super powers. Tables can be used to keep information organized, as input to source blocks (more about that in the first post, &amp;#34;Emacs Org mode source blocks&amp;#34;) or used in calculations.</description>
    </item>
    
    <item>
      <title>Emacs Org mode source blocks</title>
      <link>https://jherrlin.github.io/posts/emacs-orgmode-source-code-blocks/</link>
      <pubDate>Mon, 15 Jun 2020 13:18:00 +0200</pubDate>
      
      <guid>https://jherrlin.github.io/posts/emacs-orgmode-source-code-blocks/</guid>
      <description>Post updates [2020-06-23] New section. &amp;#34;Combine source blocks&amp;#34; Intro It&amp;#39;s time to start documenting how I use Emacs Org mode (from now on org) and it will contain a serie of posts. This is the first post and it will cover source blocks. Some of the content assumes basic knowledge about org. If you are new to org I can recommend this two videos; hrs and kitchin.
One of the features I&amp;#39;ve been using very frequently is source blocks.</description>
    </item>
    
    <item>
      <title>Quick overview of Clojure spec, test.check and transducers</title>
      <link>https://jherrlin.github.io/posts/clojure-spec-test-transducers/</link>
      <pubDate>Fri, 22 May 2020 23:47:13 +0200</pubDate>
      
      <guid>https://jherrlin.github.io/posts/clojure-spec-test-transducers/</guid>
      <description>Into A quick and dirty overview on some of the capabilities of Clojure spec, test.check and transducers. With focus on generative data. Describing models with spec and then use test.check to generate entities from that model. Bulletproof transducers with the generated data.
Wont cover or explain details, instead show how it can be used.
Some examples where generated data can be used:
Provide generated data through a Rest API endpoint and serve it a JSON.</description>
    </item>
    
    <item>
      <title>Entity event log in Datomic</title>
      <link>https://jherrlin.github.io/posts/datomic-entity-event-log/</link>
      <pubDate>Sun, 17 May 2020 20:28:11 +0200</pubDate>
      
      <guid>https://jherrlin.github.io/posts/datomic-entity-event-log/</guid>
      <description>TL;DR Create an event log from Datomic transactions that&amp;#39;s related to an entity. Look at transaction metadata, diffs and the entity from different angles.
Intro I am pretty new to Datomic and writing a small Clojure app. In my domain models I have a model called event-log. This model is used to keep track of changes (mutations) in the system. It have the following attributes: author, datetime, entity, id, type.</description>
    </item>
    
  </channel>
</rss>
